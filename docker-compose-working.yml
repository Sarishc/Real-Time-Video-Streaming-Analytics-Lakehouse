version: '3.8'

services:
  # Redpanda (Kafka-compatible) - No Zookeeper needed
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:latest
    container_name: video-streaming-redpanda
    command:
      - redpanda
      - start
      - --kafka-addr
      - internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr
      - internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr
      - internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr
      - internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr
      - internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr
      - redpanda:33145
      - --advertise-rpc-addr
      - redpanda:33145
      - --smp
      - '1'
      - --memory
      - 1G
      - --mode
      - dev-container
      - --default-log-level=info
    ports:
      - "18081:18081"
      - "18082:18082"
      - "19092:19092"
      - "19644:9644"
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster info"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: video-streaming-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO bucket setup
  minio-setup:
    image: minio/mc:latest
    container_name: video-streaming-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb minio/video-streaming-lakehouse --ignore-existing;
      /usr/bin/mc policy set public minio/video-streaming-lakehouse;
      exit 0;
      "
    networks:
      - streaming-network

  # Redpanda Console (Kafka UI)
  console:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: video-streaming-console
    depends_on:
      redpanda:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      KAFKA_BROKERS: redpanda:9092
    volumes:
      - ./config/console-config.yml:/tmp/config.yml:ro
    networks:
      - streaming-network

  # Python Data Generator
  data-generator:
    build:
      context: .
      dockerfile: Dockerfile.generator
    container_name: video-streaming-data-generator
    depends_on:
      redpanda:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - EVENTS_PER_SECOND=5
    volumes:
      - ./logs:/app/logs
    networks:
      - streaming-network
    restart: unless-stopped

  # Jupyter Notebook
  jupyter:
    image: jupyter/scipy-notebook:latest
    container_name: video-streaming-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/work/data
    networks:
      - streaming-network

volumes:
  minio-data:

networks:
  streaming-network:
    driver: bridge
