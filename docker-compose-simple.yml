# Simplified Docker Compose for Video Streaming Analytics Lakehouse
version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: apache/kafka:latest
    container_name: video-streaming-zookeeper
    ports:
      - "2181:2181"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@0.0.0.0:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: video-streaming-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Python Data Generator
  data-generator:
    build:
      context: .
      dockerfile: infrastructure/docker/data-generator.Dockerfile
    container_name: video-streaming-data-generator
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      - ENVIRONMENT=development
      - KAFKA_BOOTSTRAP_SERVERS=zookeeper:9092
      - EVENTS_PER_SECOND=5
    volumes:
      - ./data-generation:/app/data-generation
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - streaming-network
    restart: unless-stopped

  # Kafka UI for management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: video-streaming-kafka-ui
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: video-streaming-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: zookeeper:9092
    networks:
      - streaming-network

  # Jupyter Notebook for data exploration
  jupyter:
    image: jupyter/pyspark-notebook:latest
    container_name: video-streaming-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - GRANT_SUDO=yes
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data-generation:/home/jovyan/work/data-generation
      - ./config:/home/jovyan/work/config
    networks:
      - streaming-network
    user: root

volumes:
  minio-data:

networks:
  streaming-network:
    driver: bridge
