# Docker Compose for Video Streaming Analytics Lakehouse
# Production-ready local development environment

version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    hostname: zookeeper
    container_name: video-streaming-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.1
    hostname: kafka
    container_name: video-streaming-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
      # Performance tuning
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_LOG_CLEANUP_POLICY: delete
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI for management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: video-streaming-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: video-streaming-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9997
    networks:
      - streaming-network

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: video-streaming-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_DEFAULT_BUCKETS: 'video-streaming-lakehouse-dev'
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO client for bucket setup
  minio-setup:
    image: minio/mc:latest
    container_name: video-streaming-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb minio/video-streaming-lakehouse-dev --ignore-existing;
      /usr/bin/mc policy set public minio/video-streaming-lakehouse-dev;
      exit 0;
      "
    networks:
      - streaming-network

  # Spark Master
  spark-master:
    image: apache/spark:latest
    container_name: video-streaming-spark-master
    ports:
      - "8081:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_MASTER_OPTS=-Dspark.deploy.defaultCores=2
    volumes:
      - ./spark-jobs:/opt/spark-jobs
      - ./delta-lake:/opt/delta-lake
      - ./config:/opt/config
      - spark-logs:/opt/spark/logs
    networks:
      - streaming-network

  # Spark Worker
  spark-worker:
    image: apache/spark:latest
    container_name: video-streaming-spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark-jobs:/opt/spark-jobs
      - ./delta-lake:/opt/delta-lake
      - ./config:/opt/config
      - spark-worker-logs:/opt/spark/logs
    networks:
      - streaming-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: video-streaming-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - streaming-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: video-streaming-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - streaming-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: video-streaming-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for metadata and application data
  postgres:
    image: postgres:15-alpine
    container_name: video-streaming-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: video_streaming_metadata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infrastructure/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Data Generator Service
  data-generator:
    build:
      context: .
      dockerfile: infrastructure/docker/data-generator.Dockerfile
    container_name: video-streaming-data-generator
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - ENVIRONMENT=development
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - EVENTS_PER_SECOND=10
    volumes:
      - ./data-generation:/app/data-generation
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - streaming-network
    restart: unless-stopped

  # Kafka Consumer Service
  kafka-consumer:
    build:
      context: .
      dockerfile: infrastructure/docker/kafka-consumer.Dockerfile
    container_name: video-streaming-kafka-consumer
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      - ENVIRONMENT=development
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - S3_ENDPOINT=http://minio:9000
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin123
    volumes:
      - ./kafka-setup:/app/kafka-setup
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - streaming-network
    restart: unless-stopped

  # Spark Streaming Job
  spark-streaming:
    build:
      context: .
      dockerfile: infrastructure/docker/spark-streaming.Dockerfile
    container_name: video-streaming-spark-streaming
    depends_on:
      - spark-master
      - kafka
      - minio
    environment:
      - SPARK_MASTER_URL=spark://spark-master:7077
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - S3_ENDPOINT=http://minio:9000
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin123
    volumes:
      - ./spark-jobs:/app/spark-jobs
      - ./delta-lake:/app/delta-lake
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - streaming-network
    restart: unless-stopped

  # Jupyter Notebook for data exploration
  jupyter:
    image: jupyter/pyspark-notebook:latest
    container_name: video-streaming-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - GRANT_SUDO=yes
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data-generation:/home/jovyan/work/data-generation
      - ./spark-jobs:/home/jovyan/work/spark-jobs
      - ./config:/home/jovyan/work/config
    networks:
      - streaming-network
    user: root

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  minio-data:
  spark-logs:
  spark-worker-logs:
  prometheus-data:
  grafana-data:
  redis-data:
  postgres-data:

networks:
  streaming-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
